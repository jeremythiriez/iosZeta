//
//  ScanTableViewController.swift
//  Zeta
//
//  Created by Jeremy Thiriez on 07/12/2017.
//  Copyright Â© 2017 Jeremy Thiriez. All rights reserved.
//

import UIKit
import CoreBluetooth
import AudioKit

class ScanTableViewController: UITableViewController, CBCentralManagerDelegate {
    
    var peripherals:[CBPeripheral] = []
    var peripheralsName: [String] = []
    var peripheralsRSSI: [Double] = []
    var manager:CBCentralManager? = nil
    var parentView:MainViewController? = nil
    var parser: GanglionParser = GanglionParser()

    
    override func viewDidLoad() {
        super.viewDidLoad()
        test()
    }
    
    func test() {
        var sample2: [Float] = [1.0, 0.9048270524660196, 0.6374239897486897, 0.24868988716485474, -0.1873813145857246, -0.587785252292473, -0.8763066800438637, -0.9980267284282716, -0.9297764858882515, -0.6845471059286886, -0.30901699437494756, 0.12533323356430423, 0.5358267949789967, 0.8443279255020147, 0.9921147013144778, 0.9510565162951536, 0.7289686274214116, 0.36812455268467875, -0.0627905195293136, -0.4817536741017156, -0.8090169943749472, -0.9822872507286888, -0.9685831611286311, -0.7705132427757897, -0.4257792915650724, -2.2049832191018243e-15, 0.4257792915650716, 0.7705132427757891, 0.9685831611286309, 0.9822872507286886, 0.8090169943749477, 0.4817536741017164, 0.06279051952931357, -0.36812455268467875, -0.7289686274214104, -0.9510565162951534, -0.9921147013144778, -0.8443279255020153, -0.535826794978996, -0.12533323356430243, 0.3090169943749468, 0.684547105928689, 0.9297764858882519, 0.9980267284282717, 0.8763066800438637, 0.5877852522924722, 0.1873813145857261, -0.24868988716485438, -0.6374239897486902, -0.9048270524660202, -1.0, -0.9048270524660209, -0.6374239897486915, -0.24868988716485604, 0.18738131458572443, 0.5877852522924738, 0.8763066800438628, 0.9980267284282716, 0.9297764858882512, 0.6845471059286902, 0.3090169943749484, -0.12533323356430426, -0.5358267949789945, -0.8443279255020143, -0.9921147013144778, -0.9510565162951534, -0.7289686274214104, -0.368124552684682, 0.06279051952931008, 0.4817536741017133, 0.8090169943749468, 0.9822872507286886, 0.9685831611286309, 0.7705132427757903, 0.42577929156507316, -4.904777002955296e-16, -0.42577929156507405, -0.7705132427757909, -0.9685831611286321, -0.9822872507286892, -0.8090169943749482, -0.4817536741017156, -0.06279051952931264, 0.36812455268467964, 0.7289686274214136, 0.9510565162951525, 0.9921147013144781, 0.8443279255020156, 0.5358267949789967, 0.1253332335643033, -0.30901699437494934, -0.6845471059286857, -0.9297764858882502, -0.9980267284282717, -0.876306680043864, -0.587785252292473, -0.18738131458572346, 0.24868988716485696, 0.6374239897486922, 0.9048270524660184, 1.0, 0.9048270524660228, 0.6374239897486949, 0.2486898871648603, -0.18738131458572008, -0.5877852522924703, -0.8763066800438624, -0.9980267284282714, -0.9297764858882516, -0.6845471059286883, -0.30901699437494584, 0.1253332335642999, 0.5358267949789938, 0.8443279255020139, 0.9921147013144777, 0.9510565162951536, 0.7289686274214109, 0.36812455268467614, -0.06279051952930922, -0.48175367410171255, -0.8090169943749462, -0.9822872507286885, -0.9685831611286311, -0.770513242775793, -0.42577929156507716, -3.919488737908119e-15, 0.42577929156507005, 0.770513242775788, 0.968583161128631, 0.9822872507286886, 0.8090169943749467, 0.48175367410171316, 0.06279051952930996, -0.3681245526846821, -0.7289686274214056, -0.9510565162951512, -0.9921147013144787, -0.8443279255020181, -0.5358267949790004, -0.12533323356430767, 0.3090169943749451, 0.6845471059286876, 0.9297764858882513, 0.9980267284282716, 0.8763066800438627, 0.5877852522924709, 0.18738131458572777, -0.24868988716484583, -0.6374239897486889, -0.9048270524660165, -1.0, -0.9048270524660217, -0.6374239897486874, -0.24868988716485765, 0.1873813145857297, 0.5877852522924724, 0.8763066800438671, 0.9980267284282717, 0.9297764858882532, 0.6845471059286966, 0.30901699437495006, -0.12533323356429552, -0.5358267949789961, -0.8443279255020115, -0.992114701314478, -0.951056516295155, -0.7289686274214091, -0.3681245526846803, 0.06279051952931902, 0.48175367410171493, 0.8090169943749437, 0.9822872507286863, 0.9685831611286322, 0.7705132427757958, 0.4257792915650747, 8.329455176111767e-15, -0.4257792915650725, -0.7705132427757853, -0.9685831611286316, -0.9822872507286895, -0.8090169943749451, -0.48175367410171704, -0.06279051952932145, 0.36812455268467803, 0.7289686274214073, 0.9510565162951543, 0.9921147013144783, 0.8443279255020204, 0.5358267949789981, 0.12533323356431206, -0.30901699437494773, -0.6845471059286845, -0.9297764858882522, -0.9980267284282718, -0.8763066800438615, -0.5877852522924744, -0.18738131458571816, 0.2486898871648553, 0.6374239897486855, 0.9048270524660207]
        var sample: [Float] = [0.0725595504642399, 0.0762394304093448, 0.0799193103544497, 0.0835991902995546, 0.0872790702446596, 0.0909589501897645, 0.0946388301348694, 0.0983187100799743, 0.101998590025079, 0.105678469970184, 0.109358349915289, 0.113038229860394, 0.116718109805499, 0.120397989750604, 0.124077869695709, 0.127757749640814, 0.131437629585918, 0.135117509531023, 0.138797389476128, 0.142477269421233, 0.146157149366338, 0.149837029311443, 0.153516909256548, 0.157196789201653, 0.160876669146758, 0.165199114353411, 0.17004888355146, 0.175268209070969, 0.180725266926402, 0.186297979310907, 0.192845360052617, 0.200270758922915, 0.208486415434835, 0.21741358973955, 0.226985704142138, 0.237131446234628, 0.247789698575699, 0.258917082068432, 0.270458410752472, 0.282125955442409, 0.294335275096283, 0.306269962693589, 0.317792962129072, 0.329315961564555, 0.340838961000038, 0.352361960435521, 0.363884959871004, 0.375545638105045, 0.387534984336844, 0.40007386956441, 0.412796363299067, 0.426064581331771, 0.439733490351153, 0.453077869571824, 0.466219437770262, 0.47872282947948, 0.491226221188698, 0.503729612897916, 0.516233004607133, 0.528736396316351, 0.541239788025569, 0.553743179734787, 0.566246571444004, 0.578749963153222, 0.59125335486244, 0.603756746571658, 0.616469409979885, 0.629398091866228, 0.656806567830513, 0.670621998641355, 0.684439357370506, 0.69871721556275, 0.713226208907802, 0.727755810970293, 0.742402810355129, 0.757360847850414, 0.772469919326179, 0.78848800895936, 0.805219703249382, 0.822180105497289, 0.839317421831777, 0.857182150532895, 0.875320892337176, 0.894281636051953, 0.913242379766729, 0.932203123481506, 0.951163867196282, 0.970124610911059, 0.989085354625835, 1.00804609834061, 1.02700684205539, 1.04596758577016, 1.06492832948494, 1.08388907319972, 1.1025986676883, 1.12092642963458, 1.13963964995595, 1.15860039367073, 1.1775611373855, 1.19652188110028, 1.21548262481506, 1.23444336852983, 1.25340411224461, 1.27236485595939, 1.29132559967416, 1.31028634338894, 1.32924708710372, 1.34756720469495, 1.3654260879328, 1.38242605084001, 1.39942601374721, 1.41642597665442, 1.43342593956163, 1.45042590246883, 1.46742756516047, 1.48535087191099, 1.50356115425713, 1.52196001543709, 1.54091900700885, 1.56022586722355, 1.58029377272312, 1.60131530964393, 1.62314645444755, 1.64552339086741, 1.66839955341203, 1.69173506353062, 1.71561255056774, 1.73993503518359, 1.76482593032922, 1.79034584855949, 1.81656485689576, 1.84347725199096, 1.87084166071678, 1.89858279889173, 1.92665786710335, 1.95497702548043, 1.98347538676272, 2.012108352646, 2.04085669630577, 2.0697112998665, 2.09864979498793, 2.12767815802982, 2.15689499892825, 2.18617649334319, 2.21540681845008, 2.24448322424385, 2.27347839193577, 2.30252724401832, 2.33169249113007, 2.36093704842537, 2.3901770879218, 2.41936092420514, 2.44860309731436, 2.47746501985886, 2.50586800434839, 2.53421444155407, 2.56256695048696, 2.59089856086017, 2.61915511144589, 2.64751791445277, 2.67578009171763, 2.70388477058533, 2.73184591958135, 2.75957596895362, 2.78695701836326, 2.81384470020107, 2.84034582974312, 2.86653261697331, 2.89369789473822, 2.92001188530783, 2.94540650380764, 2.97002565409929, 2.99394765716284, 3.01725477957257, 3.04000666150939, 3.06226690370806, 3.08407603172199, 3.10549357353513, -0.000315763473753689, -0.00399481316111946, -0.00792915588357156, -0.0120933266638767, -0.0164651965153568, -0.0210149434775982, -0.0257284606488347, -0.0306917507631622, -0.0356577934436879, -0.0408433233593246, -0.0460288532749613, -0.0512143831905981, -0.0563999131062348, -0.0615854430218715, -0.0667625488133757, -0.0712499703466857, -0.0751169107263285, -0.0789108613529718, -0.0820518797160267, -0.0852766306940438, -0.0885013816720609, -0.0917261326500779]
        let array: [[Float]] = [[0.0725595504642399, 0.0762394304093448, 0.0799193103544497, 0.0835991902995546, 0.0872790702446596, 0.0909589501897645, 0.0946388301348694, 0.0983187100799743, 0.101998590025079, 0.105678469970184, 0.109358349915289, 0.113038229860394, 0.116718109805499, 0.120397989750604, 0.124077869695709, 0.127757749640814, 0.131437629585918, 0.135117509531023, 0.138797389476128, 0.142477269421233, 0.146157149366338, 0.149837029311443, 0.153516909256548, 0.157196789201653, 0.160876669146758, 0.165199114353411, 0.17004888355146, 0.175268209070969, 0.180725266926402, 0.186297979310907, 0.192845360052617, 0.200270758922915, 0.208486415434835, 0.21741358973955, 0.226985704142138, 0.237131446234628, 0.247789698575699, 0.258917082068432, 0.270458410752472, 0.282125955442409, 0.294335275096283, 0.306269962693589, 0.317792962129072, 0.329315961564555, 0.340838961000038, 0.352361960435521, 0.363884959871004, 0.375545638105045, 0.387534984336844, 0.40007386956441, 0.412796363299067, 0.426064581331771, 0.439733490351153, 0.453077869571824, 0.466219437770262, 0.47872282947948, 0.491226221188698, 0.503729612897916, 0.516233004607133, 0.528736396316351, 0.541239788025569, 0.553743179734787, 0.566246571444004, 0.578749963153222, 0.59125335486244, 0.603756746571658, 0.616469409979885, 0.629398091866228, 0.656806567830513, 0.670621998641355, 0.684439357370506, 0.69871721556275, 0.713226208907802, 0.727755810970293, 0.742402810355129, 0.757360847850414, 0.772469919326179, 0.78848800895936, 0.805219703249382, 0.822180105497289, 0.839317421831777, 0.857182150532895, 0.875320892337176, 0.894281636051953, 0.913242379766729, 0.932203123481506, 0.951163867196282, 0.970124610911059, 0.989085354625835, 1.00804609834061, 1.02700684205539, 1.04596758577016, 1.06492832948494, 1.08388907319972, 1.1025986676883, 1.12092642963458, 1.13963964995595, 1.15860039367073, 1.1775611373855, 1.19652188110028, 1.21548262481506, 1.23444336852983, 1.25340411224461, 1.27236485595939, 1.29132559967416, 1.31028634338894, 1.32924708710372, 1.34756720469495, 1.3654260879328, 1.38242605084001, 1.39942601374721, 1.41642597665442, 1.43342593956163, 1.45042590246883, 1.46742756516047, 1.48535087191099, 1.50356115425713, 1.52196001543709, 1.54091900700885, 1.56022586722355, 1.58029377272312, 1.60131530964393, 1.62314645444755, 1.64552339086741, 1.66839955341203, 1.69173506353062, 1.71561255056774, 1.73993503518359, 1.76482593032922, 1.79034584855949, 1.81656485689576, 1.84347725199096, 1.87084166071678, 1.89858279889173, 1.92665786710335, 1.95497702548043, 1.98347538676272, 2.012108352646, 2.04085669630577, 2.0697112998665, 2.09864979498793, 2.12767815802982, 2.15689499892825, 2.18617649334319, 2.21540681845008, 2.24448322424385, 2.27347839193577, 2.30252724401832, 2.33169249113007, 2.36093704842537, 2.3901770879218, 2.41936092420514, 2.44860309731436, 2.47746501985886, 2.50586800434839, 2.53421444155407, 2.56256695048696, 2.59089856086017, 2.61915511144589, 2.64751791445277, 2.67578009171763, 2.70388477058533, 2.73184591958135, 2.75957596895362, 2.78695701836326, 2.81384470020107, 2.84034582974312, 2.86653261697331, 2.89369789473822, 2.92001188530783, 2.94540650380764, 2.97002565409929, 2.99394765716284, 3.01725477957257, 3.04000666150939, 3.06226690370806, 3.08407603172199, 3.10549357353513, -0.000315763473753689, -0.00399481316111946, -0.00792915588357156, -0.0120933266638767, -0.0164651965153568, -0.0210149434775982, -0.0257284606488347, -0.0306917507631622, -0.0356577934436879, -0.0408433233593246, -0.0460288532749613, -0.0512143831905981, -0.0563999131062348, -0.0615854430218715, -0.0667625488133757, -0.0712499703466857, -0.0751169107263285, -0.0789108613529718, -0.0820518797160267, -0.0852766306940438, -0.0885013816720609, -0.0917261326500779], [0.0725595504642399, 0.0762394304093448, 0.0799193103544497, 0.0835991902995546, 0.0872790702446596, 0.0909589501897645, 0.0946388301348694, 0.0983187100799743, 0.101998590025079, 0.105678469970184, 0.109358349915289, 0.113038229860394, 0.116718109805499, 0.120397989750604, 0.124077869695709, 0.127757749640814, 0.131437629585918, 0.135117509531023, 0.138797389476128, 0.142477269421233, 0.146157149366338, 0.149837029311443, 0.153516909256548, 0.157196789201653, 0.160876669146758, 0.165199114353411, 0.17004888355146, 0.175268209070969, 0.180725266926402, 0.186297979310907, 0.192845360052617, 0.200270758922915, 0.208486415434835, 0.21741358973955, 0.226985704142138, 0.237131446234628, 0.247789698575699, 0.258917082068432, 0.270458410752472, 0.282125955442409, 0.294335275096283, 0.306269962693589, 0.317792962129072, 0.329315961564555, 0.340838961000038, 0.352361960435521, 0.363884959871004, 0.375545638105045, 0.387534984336844, 0.40007386956441, 0.412796363299067, 0.426064581331771, 0.439733490351153, 0.453077869571824, 0.466219437770262, 0.47872282947948, 0.491226221188698, 0.503729612897916, 0.516233004607133, 0.528736396316351, 0.541239788025569, 0.553743179734787, 0.566246571444004, 0.578749963153222, 0.59125335486244, 0.603756746571658, 0.616469409979885, 0.629398091866228, 0.656806567830513, 0.670621998641355, 0.684439357370506, 0.69871721556275, 0.713226208907802, 0.727755810970293, 0.742402810355129, 0.757360847850414, 0.772469919326179, 0.78848800895936, 0.805219703249382, 0.822180105497289, 0.839317421831777, 0.857182150532895, 0.875320892337176, 0.894281636051953, 0.913242379766729, 0.932203123481506, 0.951163867196282, 0.970124610911059, 0.989085354625835, 1.00804609834061, 1.02700684205539, 1.04596758577016, 1.06492832948494, 1.08388907319972, 1.1025986676883, 1.12092642963458, 1.13963964995595, 1.15860039367073, 1.1775611373855, 1.19652188110028, 1.21548262481506, 1.23444336852983, 1.25340411224461, 1.27236485595939, 1.29132559967416, 1.31028634338894, 1.32924708710372, 1.34756720469495, 1.3654260879328, 1.38242605084001, 1.39942601374721, 1.41642597665442, 1.43342593956163, 1.45042590246883, 1.46742756516047, 1.48535087191099, 1.50356115425713, 1.52196001543709, 1.54091900700885, 1.56022586722355, 1.58029377272312, 1.60131530964393, 1.62314645444755, 1.64552339086741, 1.66839955341203, 1.69173506353062, 1.71561255056774, 1.73993503518359, 1.76482593032922, 1.79034584855949, 1.81656485689576, 1.84347725199096, 1.87084166071678, 1.89858279889173, 1.92665786710335, 1.95497702548043, 1.98347538676272, 2.012108352646, 2.04085669630577, 2.0697112998665, 2.09864979498793, 2.12767815802982, 2.15689499892825, 2.18617649334319, 2.21540681845008, 2.24448322424385, 2.27347839193577, 2.30252724401832, 2.33169249113007, 2.36093704842537, 2.3901770879218, 2.41936092420514, 2.44860309731436, 2.47746501985886, 2.50586800434839, 2.53421444155407, 2.56256695048696, 2.59089856086017, 2.61915511144589, 2.64751791445277, 2.67578009171763, 2.70388477058533, 2.73184591958135, 2.75957596895362, 2.78695701836326, 2.81384470020107, 2.84034582974312, 2.86653261697331, 2.89369789473822, 2.92001188530783, 2.94540650380764, 2.97002565409929, 2.99394765716284, 3.01725477957257, 3.04000666150939, 3.06226690370806, 3.08407603172199, 3.10549357353513, -0.000315763473753689, -0.00399481316111946, -0.00792915588357156, -0.0120933266638767, -0.0164651965153568, -0.0210149434775982, -0.0257284606488347, -0.0306917507631622, -0.0356577934436879, -0.0408433233593246, -0.0460288532749613, -0.0512143831905981, -0.0563999131062348, -0.0615854430218715, -0.0667625488133757, -0.0712499703466857, -0.0751169107263285, -0.0789108613529718, -0.0820518797160267, -0.0852766306940438, -0.0885013816720609, -0.0917261326500779]]

        
        do {
            
            
            /*--------------------TEST FFT EZAUDIO--------------------*/
            /*let bandpass: NVBandpassFilter = NVBandpassFilter(samplingRate: 200)
            bandpass.centerFrequency = 22.5
            bandpass.q = 1.6
            bandpass.filterData(&sample, numFrames: 200, numChannels: 200)
 */
            print(sample2.count)
            let test = EZAudioFFT(maximumBufferSize: 200, sampleRate: 200)
            test?.computeFFT(withBuffer: &sample2[0], withBufferSize: 200)
            let data = test?.fftData
            
            print("-------")
            for i in 0..<100 {
                print(data![i])
            }
            print("-------")
            
            
            /*--------------------TEST BANDPASS AUDIOKIT--------------------*/
            
            
          /*  let file = try AKAudioFile(createFileFromFloats: array)
            let player = try AKAudioPlayer(file: file)
            player.looping = true
            let filtre = AKBandPassButterworthFilter(player)
            filtre.centerFrequency = 22.5;
            filtre.bandwidth = 43;
            filtre.rampTime = 4;
            */
        
            
            /*AudioKit.output = player
            AudioKit.start()
            player.play()
            filtre.start()
            filtre.play() */
 /*
            let test = GanglionFFT()
            test.setupNode(player)
            
            
            let data = test.fft?.fftData
            */
           /* for i in 0..<200 {
                print(data![i])
            }*/
   /*
            let delta = (data![1] + data![2] + data![3] + data![4]) / 4
            let alpha = (data![8] + data![9] + data![10] + data![11] + data![12]) / 5
          
            print(alpha / delta)
     */
            
            /*--------------------TEST PARSER--------------------*/
            /*
            let buffer: [UInt8] = [UInt8] (
                [
                    0b01100101, // 0
                    0b11111111, // 1
                    0b11111111, // 2
                    0b10111111, // 3
                    0b11111111, // 4
                    0b11101111, // 5
                    0b11111111, // 6
                    0b11111100, // 7
                    0b11111111, // 8
                    0b11111111, // 9
                    0b01011000, // 10
                    0b00000000, // 11
                    0b00001011, // 12
                    0b00111110, // 13
                    0b00111000, // 14
                    0b11100000, // 15
                    0b00000000, // 16
                    0b00111111, // 17
                    0b11110000, // 18
                    0b00000001  // 19
                ]);
            parser.parse(buffer: buffer)
            parser.process_sample(sample: 0)
            for e in parser.data {
                print(e)
            }
            parser.process_sample(sample: 1)
            for e in parser.data {
                print(e)
            }*/
            
        } catch {
            print("ERROR")
        }
    }
    
    override func viewDidAppear(_ animated: Bool) {
        scanBLEDevices()
    }    
    
    // MARK: - Table view data source
    
    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // #warning Incomplete implementation, return the number of rows
        return peripherals.count
    }
    
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "scanTableCell", for: indexPath)
        cell.textLabel?.text = peripheralsName[indexPath.row]
    
        return cell
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let peripheral = peripherals[indexPath.row]
        
        manager?.connect(peripheral, options: nil)
    }
    
    // MARK: BLE Scanning
    func scanBLEDevices() {
        print("start sanning")
        manager?.scanForPeripherals(withServices: nil, options: nil)
        
        //stop scanning after 3 seconds
        DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
            self.stopScanForBLEDevices()
        }
    }
    
    func stopScanForBLEDevices() {
        print("Stop scanning")
        manager?.stopScan()
    }
    
    // MARK: - CBCentralManagerDelegate Methods
    func centralManager(_ central: CBCentralManager, didDiscover peripheral: CBPeripheral, advertisementData: [String : Any], rssi RSSI: NSNumber) {
        
        if (!peripherals.contains(peripheral) && peripheral.name != nil &&
            (peripheral.name == "Simblee" || (peripheral.name?.hasPrefix("Ganglion"))!)) {
            
            print("Signal \(RSSI.doubleValue)")
            let localName = advertisementData[CBAdvertisementDataLocalNameKey]
            print("LocalName: ")
            print(localName as! String)
            peripheralsName.append(localName as! String )
            peripherals.append(peripheral)
        }
        
        self.tableView.reloadData()
    }
    
//   func centralManager(_ central: CBCentralManager, didDiscover peripheral: CBPeripheral, advertisementData: [String : AnyObject], rssi RSSI: NSNumber) {
//        
//        if(!peripherals.contains(peripheral)) {
//            peripherals.append(peripheral)
//        }
//        
//        self.tableView.reloadData()
//    }
    
    func centralManagerDidUpdateState(_ central: CBCentralManager) {
   
        switch central.state {
        case .poweredOn:
            print("powered on")
        case .poweredOff:
            print("powered off")
        case .resetting:
            print("resetting")
        case .unauthorized:
            print("unauthorized")
        case .unsupported:
            print("unsupported")
        case .unknown:
            print("unknown")
        }
    }
    
    func centralManager(_ central: CBCentralManager, didConnect peripheral: CBPeripheral) {
        
        //pass reference to connected peripheral to parent view
        parentView?.mainPeripheral = peripheral
        peripheral.delegate = parentView
        peripheral.discoverServices(nil)
        
        //set the manager's delegate view to parent so it can call relevant disconnect methods
        manager?.delegate = parentView
        parentView?.customiseNavigationBar()
        
        if let navController = self.navigationController {
            navController.popViewController(animated: true)
        }
        print("Connected to " +  peripheral.name!)
    }
    
    func centralManager(_ central: CBCentralManager, didFailToConnect peripheral: CBPeripheral, error: Error?) {
        print(error!)
    }
    
}
